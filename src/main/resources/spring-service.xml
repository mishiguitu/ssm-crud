<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd "  >


    <!--   2. spring-service.xml要扫描service层的所有包 -->
    <context:component-scan base-package="com.itheima.service"></context:component-scan>
    <!--    1. 配置数据源,指定数据库的四个基本要素
            -->
    <!--    要引入外部的jdbc.properties文件，使用context标签-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="username" value="${jdbc.username}"></property>
    </bean>



    <!--   3. 配置和Mybatis的整合
            SqlSessionFactoryBean能帮我们创建sqlSessionFactory
            创建sqlSessionFactory需要绑定Mybatis.xml的配置文件
            原来Mybatis.xml要指定数据源，mappers和其他，数据源在这里配置-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <!--        指定Mybatis.xml的路径-->
        <property name="configLocation" value="classpath:mybatis.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>

    </bean>

    <!--    4. 配置扫描器，将Mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.itheima.dao"></property>
    </bean>

    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>


    <aop:config>
        <!--        一般是service下面类中所有方法有切入 * com.itheima.service.*.*(..)-->
        <aop:pointcut id="txPoint" expression="execution(* com.itheima.service..*(..))"/>
        <!--        配置事务增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager" >
        <tx:attributes>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

<!--配额制一个可以执行批量的sqlSession
    点进这个类发现他有有参数构造器-->
    <bean class="org.mybatis.spring.SqlSessionTemplate" id="sessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
<!--       executorType是执行类型，BATCH表示批量 -->
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>
</beans>